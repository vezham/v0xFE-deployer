# wjdlz/NOTE: ci@1.0.4
name: apps-desktop | deployer

on:
  workflow_call:
    inputs:
      CALLER:
        required: true
        type: string

env:
  REPO: ${{ inputs.GIT_REPO || 'vezham/v0xFE-apps-desktop' }}
  BRANCH: ${{ inputs.CALLER || inputs.GIT_BRANCH || 'timeline' }}
  CI_DIR: ./v/bin/ci
  # ENTRY_POINT: ./
  # DX_APP_PATH:
  # DX_APP_NAME:
  # NX_APP_NAME:

jobs:
  build_and_deploy:
    name: build & deploy
    strategy:
      fail-fast: false
      matrix:
        # os: [ubuntu-latest, macos-latest, windows-latest]
        # os: [macos-latest, windows-latest]
        os: [macos-latest]
        node-version: [20]
        pnpm-version: [9.6.0]
        include:
          - os: ubuntu-latest
            artifact_name: linux-artifacts
            # artifact_glob: 'make/**/*.{deb,rpm,AppImage}'
            artifact_glob: 'build/**/*-linux-x64'
          - os: macos-latest
            artifact_name: macos-artifacts
            # artifact_glob: 'make/**/*.dmg'
            artifact_glob: 'build/**/*-darwin-arm64'
          - os: windows-latest
            artifact_name: windows-artifacts
            # artifact_glob: 'make/**/*.exe'
            artifact_glob: 'build/**/*-win32-x64'
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: checkout | ${{ env.REPO }}@${{ env.BRANCH }}
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}

      - name: action | node & pnpm
        uses: vezham/v0xFE-deployer/.github/actions/setup-install@timeline

      - name: action | gen DX_APP_URL
        uses: vezham/v0xFE-deployer/.github/actions/gen-dx-app-url@timeline

      - name: action | gen-build
        uses: vezham/v0xFE-deployer/.github/apps-desktop-actions/gen-build@timeline

      - name: action | gen-artifact
        uses: vezham/v0xFE-deployer/.github/apps-desktop-actions/gen-artifact@timeline

      - name: Create Release
        if: runner.os == 'Linux'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Download artifacts from other platforms
          mkdir -p artifacts
          gh run download --dir artifacts --pattern '*.zip'

          # Create release with all artifacts
          assets=()
          for zip in artifacts/*.zip *.zip; do
            if [ -f "$zip" ]; then
              assets+=("$zip")
            fi
          done

          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ github.ref_name }}" \
            --draft=false \
            --prerelease=false \
            "${assets[@]}"

      # ------------------
      # - name: action | create commit comment
      #   uses: vezham/v0xFE-deployer/.github/actions/add-commit-comment@timeline

      # POC --- EOT......
      # - uses: ./.github/actions/setup-certificates
      #   with:
      #     platform: ${{ runner.os }}
      #   env:
      #     APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
      #     APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     WINDOWS_PFX: ${{ secrets.WINDOWS_PFX }}
      #     WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}

      # - name: Build and publish
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     APPLE_ID: ${{ secrets.APPLE_ID }}
      #     APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
      #     APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      #     WINDOWS_PFX_PASSWORD: ${{ secrets.WINDOWS_PFX_PASSWORD }}
      #   run: |
      #     pnpm run make
      #     pnpm run publish

      # - name: Create artifact archive
      #   shell: bash
      #   run: |
      #     cd out
      #     if [ "${{ runner.os }}" == "Windows" ]; then
      #       7z a ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_glob }}
      #     else
      #       zip -r ../${{ matrix.artifact_name }}.zip ${{ matrix.artifact_glob }}
      #     fi

      # - name: Upload artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.artifact_name }}
      #     path: ${{ matrix.artifact_name }}.zip
      #     if-no-files-found: error

      # - name: Create Release
      #   if: runner.os == 'Linux'
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   run: |
      #     # Download artifacts from other platforms
      #     mkdir -p artifacts
      #     gh run download --dir artifacts --pattern '*.zip'

      #     # Create release with all artifacts
      #     assets=()
      #     for zip in artifacts/*.zip *.zip; do
      #       if [ -f "$zip" ]; then
      #         assets+=("$zip")
      #       fi
      #     done

      #     gh release create "${{ github.ref_name }}" \
      #       --title "Release ${{ github.ref_name }}" \
      #       --draft=false \
      #       --prerelease=false \
      #       "${assets[@]}"
